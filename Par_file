# title of job
title                           = Membrane Wave

# axisymmetric (2.5D) or Cartesian planar (2D) simulation
AXISYM                          = .false.

# forward or adjoint simulation
SIMULATION_TYPE                 = 1  # 1 = forward, 3 = adjoint + kernels; 2 is purposely UNUSED (for compatibility with the numbering of our 3D codes)
NOISE_TOMOGRAPHY                = 0  # 0 = earthquake simulation, 1/2/3 = noise simulation
SAVE_FORWARD                    = .false. # save the last frame, needed for adjoint simulation
# to undo attenuation for sensitivity kernel calculations or forward runs with SAVE_FORWARD
# use the flag below. It performs undoing of attenuation in an exact way for sensitivity kernel calculations
# but requires disk space for temporary storage, and uses a significant amount of memory used as buffers for temporary storage.
# When that option is on the second parameter indicates how often the code dumps restart files to disk (if in doubt, use something between 100 and 1000).
UNDO_ATTENUATION                = .false.
NT_DUMP_ATTENUATION             = 500

# parameters concerning partitioning
nproc                           = 1              # number of processes
partitioning_method             = 3              # SCOTCH = 3, ascending order (very bad idea) = 1

ngnod                           = 4              # number of control nodes per element (4 or 9)
initialfield                    = .false.        # use a plane wave as source or not
add_Bielak_conditions           = .false.        # add Bielak conditions or not if initial plane wave

# available models
#   default: define model using nbmodels below
#   ascii: read model from ascii database file e.g. proc000000_rho_vp_vs.dat
#   binary: read model from binary databse file
#   external: define model using define_external_model subroutine
#   legacy: read model from model_velocity.dat_input
MODEL                           = ascii

# Output the model with the requested type, does not save if turn to default
SAVE_MODEL                      = default

ATTENUATION_VISCOELASTIC_SOLID  = .false.        # turn attenuation (viscoelasticity) on or off for non-poroelastic solid parts of the model
ATTENUATION_PORO_FLUID_PART     = .false.        # turn viscous attenuation on or off for the fluid part of poroelastic parts of the model
Q0                              =  1             # quality factor for viscous attenuation
freq0                           =  10            # frequency for viscous attenuation
p_sv                            = .false.        # set the type of calculation (P-SV or SH/membrane waves)

# time step parameters LF_CHECK
nt                              = 8000           # total number of time steps
deltat                          = 5.0d-2         # duration of a time step (see section "How to choose the time step" of the manual for how to do this)
USER_T0                         = 0.0d0         # (default 48.0d0) use this t0 as earliest starting time rather than the automatically calculated one
time_stepping_scheme            = 1              # 1 = Newmark (2nd order), 2 = LDDRK4-6 (4th-order 6-stage low storage Runge-Kutta), 3 = classical RK4 4th-order 4-stage Runge-Kutta

# acoustic forcing
ACOUSTIC_FORCING                = .false.        # acoustic forcing of an acoustic medium with a rigid interface

# source parameters
NSOURCES                        = 1              # number of sources (source info read from DATA/CMTSOLUTION file)
force_normal_to_surface         = .false.        # angleforce normal to surface (external mesh and curve file needed)

# for viscoelastic attenuation
N_SLS                           = 2                      # number of standard linear solids for attenuation
f0_attenuation                  = 5.196152422706633      # (Hz) relevant only if source is a Dirac or a Heaviside, otherwise it is f0 the dominant frequency of the source in the CMTSOLUTION file
READ_VELOCITIES_AT_f0           = .false.        # shift velocities to account for physical dispersion (see user manual for more information)

# receiver set parameters for seismograms
seismotype                      = 1              # record 1=displ 2=veloc 3=accel 4=pressure 5=curl of displ 6=the fluid potential
USE_TRICK_FOR_BETTER_PRESSURE   = .false.        # so far, this option can only be used if all the receivers are in acoustic elements
NSTEP_BETWEEN_OUTPUT_SEISMOS    = 5000000        # every how many time steps we save the seismograms (costly, do not use a very small value; if you use a very large value that is larger than the total number of time steps of the run, the seismograms will automatically be saved once at the end of the run anyway)
save_ASCII_seismograms          = .true.         # save seismograms in ASCII format or not
save_binary_seismograms_single  = .true.         # save seismograms in single precision binary format or not (can be used jointly with ASCII above to save both)
save_binary_seismograms_double  = .false.        # save seismograms in double precision binary format or not (can be used jointly with both flags above to save all)
SU_FORMAT                       = .false.        # output single precision binary seismograms in Seismic Unix format (adjoint traces will be read in the same format)
subsamp_seismos                 = 1              # subsampling of the seismograms to create smaller files (but less accurately sampled in time)
use_existing_STATIONS           = .true.         # use an existing STATION file found in ./DATA or create a new one from the receiver positions below in this Par_file
nreceiversets                   = 1            # number of receiver sets
anglerec                        = 0.d0           # angle to rotate components at receivers
rec_normal_to_surface           = .false.        # base anglerec normal to surface (external mesh and curve file needed)
save_ASCII_kernels              = .true.         # save sensitivity kernels in ASCII format (much bigger files, but compatible with current GMT scripts) or in binary format

# dummy values
nrec                            =              1  # number of receivers
xdeb                            =              0  # first receiver x in meters
zdeb                            =              0  # first receiver z in meters
xfin                            =              0  # last receiver x in meters (ignored if only one receiver)
zfin                            =              0  # last receiver z in meters (ignored if only one receiver)
enreg_surf_same_vertical        = .false.         # receivers inside the medium or at the surface

# display parameters
NSTEP_BETWEEN_OUTPUT_INFO      = 400            # every how many time steps we display information about the simulation (costly, do not use a very small value)
####
NSTEP_BETWEEN_OUTPUT_IMAGES     = 10            # LF_CHECK !!! every how many time steps we draw JPEG or PostScript pictures of the simulation (costly, do not use a very small value)
cutsnaps                        = 1.             # minimum amplitude kept in % for the JPEG and PostScript snapshots; amplitudes below that are muted
#### for JPEG color images ####
output_color_image              = .true.         # output JPEG color image of the results every NSTEP_BETWEEN_OUTPUT_IMAGES time steps or not
imagetype_JPEG                  = 3              # display 1=displ_Ux 2=displ_Uz 3=displ_norm 4=veloc_Vx 5=veloc_Vz 6=veloc_norm 7=accel_Ax 8=accel_Az 9=accel_norm 10=pressure
factor_subsample_image          = 1.0d0          # (double precision) factor to subsample color images output by the code (useful for very large models)
USE_CONSTANT_MAX_AMPLITUDE      = .false.        # by default the code normalizes each image independently to its maximum; use this option to use the global maximum below instead
CONSTANT_MAX_AMPLITUDE_TO_USE   = 1.17d4         # constant maximum amplitude to use for all color images if the above USE_CONSTANT_MAX_AMPLITUDE option is true
POWER_DISPLAY_COLOR             = 0.30d0         # non linear display to enhance small amplitudes in JPEG color images
DRAW_SOURCES_AND_RECEIVERS      = .true.         # display sources as orange crosses and receivers as green squares in JPEG images or not
DRAW_WATER_IN_BLUE              = .true.         # display acoustic layers as constant blue in JPEG images, because they likely correspond to water in the case of ocean acoustics or in the case of offshore oil industry experiments (if off, display them as greyscale, as for elastic or poroelastic elements, for instance for acoustic-only oil industry models of solid media)
USE_SNAPSHOT_NUMBER_IN_FILENAME = .false.        # use snapshot number in the file name of JPEG color snapshots instead of the time step (for instance to create movies in an easier way later)
#### for PostScript snapshots ####
output_postscript_snapshot      = .false.         # output Postscript snapshot of the results every NSTEP_BETWEEN_OUTPUT_IMAGES time steps or not
imagetype_postscript            = 1              # display 1=displ vector 2=veloc vector 3=accel vector; small arrows are displayed for the vectors
meshvect                        = .false.         # display mesh on PostScript plots or not
modelvect                       = .false.        # display velocity model on PostScript plots or not
boundvect                       = .true.         # display boundary conditions on PostScript plots or not
interpol                        = .true.         # interpolation of the PostScript display on a regular grid inside each spectral element, or use the non-evenly spaced GLL points
pointsdisp                      = 6              # number of points in each direction for interpolation of PostScript snapshots (set to 1 for lower-left corner only)
subsamp_postscript              = 1              # subsampling of background velocity model in PostScript snapshots
sizemax_arrows                  = 1.d0           # maximum size of arrows on PostScript plots in centimeters
US_LETTER                       = .false.        # use US letter or European A4 paper for PostScript plots
#### for wavefield dumps ####
NSTEP_BETWEEN_OUTPUT_WAVE_DUMPS = 10             # every how many time steps we dump results of the simulation as ASCII or binary files (costly, do not use a very small value)
output_wavefield_dumps          = .true.        # output wave field to a text file every NSTEP_BETWEEN_OUTPUT_TEXT_DUMPS time steps (creates very big files)
imagetype_wavefield_dumps       = 1              # display 1=displ vector 2=veloc vector 3=accel vector 4=pressure
use_binary_for_wavefield_dumps  = .false.        # use ASCII or single-precision binary format for the wave field dumps
####
output_grid_Gnuplot             = .false.        # generate a GNUPLOT file containing the grid, and a script to plot it
output_grid_ASCII               = .true.        # dump the grid in an ASCII text file consisting of a set of X,Y,Z points or not
output_energy                   = .false.        # compute and output total acoustic and elastic energy curves (slows down the code significantly)


nbmodels                        = 1
# available material types (see user manual for more information)
#   acoustic:    model_number 1 rho Vp 0  0 0 QKappa Qmu 0 0 0 0 0 0
#   elastic:     model_number 1 rho Vp Vs 0 0 QKappa Qmu 0 0 0 0 0 0
#   anistoropic: model_number 2 rho c11 c13 c15 c33 c35 c55 c12 c23 c25 0 0 0
#   poroelastic: model_number 3 rhos rhof phi c kxx kxz kzz Ks Kf Kfr etaf mufr Qmu
#   tomo:        model_number -1 0 0 A 0 0 0 0 0 0 0 0 0 0

1 1 2600.d0 4800.d0 3000.0d0 0 0 10.d0 10.d0 0 0 0 0 0 0


# external tomography file
TOMOGRAPHY_FILE                 = ./DATA/tomo_file.xyz

# external mesh or not
read_external_mesh              = .false.

# absorbing boundary active or not
PML_BOUNDARY_CONDITIONS         = .false.
NELEM_PML_THICKNESS             = 3
ROTATE_PML_ACTIVATE             = .false.
ROTATE_PML_ANGLE                = 30.
STACEY_ABSORBING_CONDITIONS     = .true.
ADD_SPRING_TO_STACEY            = .fasle.

# for horizontal periodic conditions: detect common points between left and right edges
ADD_PERIODIC_CONDITIONS         = .false.

# horizontal periodicity distance for periodic conditions
PERIODIC_HORIZ_DIST             = 0.3597d0

# set to true to use GPUs
GPU_MODE                        = .false.

#-----------------------------------------------------------------------------
# PARAMETERS FOR EXTERNAL MESHING

# data concerning mesh, when generated using third-party app (more info in README)
# (see also absorbing_conditions above)
mesh_file                       = ./DATA/ice_water_rock_1D/ice_water_rock_1D_elements       # file containing elements
nodes_coords_file               = ./DATA/ice_water_rock_1D/ice_water_rock_1D_nodes          # file containing node coordinates
materials_file                  = ./DATA/ice_water_rock_1D/ice_water_rock_1D_material       # file containing material index for each element
free_surface_file               = ./DATA/ice_water_rock_1D/ice_water_rock_1D_surface_free   # file containing free surface
axial_elements_file             = ./DATA/axial_elements_file # file containing the axial elements if AXISYM is true
absorbing_surface_file          = ./DATA/ice_water_rock_1D/ice_water_rock_1D_surface_absorb # file containing absorbing surface
acoustic_forcing_surface_file   = ./DATA/MSH/Surf_acforcing_Bottom_enforcing_mesh   # file containing the acoustic forcing surface
CPML_element_file               = Elements_CPML_list  # file containing the CPML element numbers
tangential_detection_curve_file = ./DATA/courbe_eros_nodes # file containing the curve delimiting the velocity model

#-----------------------------------------------------------------------------
# PARAMETERS FOR INTERNAL MESHING

# file containing interfaces for internal mesh LF CHECK !!!
interfacesfile                  = ../interfaces_membrane.dat

# geometry of the model (origin lower-left corner = 0,0) and mesh description
xmin                            = 0.d0           # abscissa of left side of the model
xmax                            = 1000000.d0      # abscissa of right side of the model LF_CHECK !!!
nx                              = 200             # number of elements along X LF_CHECK !!!

# absorbing boundary parameters (see absorbing_conditions above)
absorbbottom                    = .true.
absorbright                     = .true.
absorbtop                       = .true.
absorbleft                      = .true.

# define the different regions of the model in the (nx,nz) spectral element mes LF_CHECK !!!
nbregions                       = 1              # nb of regions and model number for each
1 200  1 200 1
